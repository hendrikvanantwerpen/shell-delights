#!/bin/bash

RUNDIR=$HOME/.local/run
LOGDIR=$HOME/.local/log
mkdir -p "$RUNDIR" "$LOGDIR"

usage() {
    echo "Usage:"
    echo -e "\t$0 NAME start PROGRAM <ARGS>"
    echo -e "\t$0 NAME log            - Show most recent program output"
    echo -e "\t$0 all|NAME status     - Show process status (is it running, can it restart, does it have logs)"
    echo -e "\t$0 all|NAME stop       - Stop process"
    echo -e "\t$0 all|NAME restart    - Restart process"
    echo -e "\t$0 all|NAME clean [-f] - Clean logs or logs and restart info (with -f)"
    echo -e "\t$0 all|NAME logs       - Show all available log files"
}

PNAME=$1
shift
if [ -z "$PNAME" ]; then
    echo "*** Defaulting to all"
    PNAME=all
fi
if [ "$PNAME" = "help" -o "$PNAME" = "-h" -o "$PNAME" = "--help" ]; then
    usage
    exit 0
fi
if echo "$PNAME" | grep '~' >&/dev/null; then
    echo "Error: Name cannot contain tilde (~)"
    exit 1
fi

CMD=$1
shift
if [ -z "$CMD" ]; then
    echo "*** Defaulting to status"
    CMD=status
fi

### Aux functions

nth_line() {
    N=$1
    head -$N | tail -1
}

pid_file() {
    PNAME=$1
    echo "$RUNDIR/${PNAME}.pid"
}
start_file() {
    PNAME=$1
    echo "$RUNDIR/${PNAME}.cmd"
}
log_file() {
    PNAME=$1
    echo "$LOGDIR/${PNAME}~$(date +%Y-%m-%dT%H.%M.%S).log"
}

ext_names() {
    THEDIR=$1
    THEEXT=$2
    ls -1d $THEDIR/*$THEEXT 2>/dev/null | xargs -I{} basename {} $THEEXT
}

all_names() {
    (ext_names "$RUNDIR" .pid ; \
     ext_names "$RUNDIR" .cmd ; \
     ext_names "$LOGDIR" .log | cut -d~ -f1) | sort | uniq
}

is_running() {
    PNAME=$1
    PIDFILE=`pid_file "$PNAME"`
    if [ -f "$PIDFILE" ]; then
        THEPID=`cat "$PIDFILE"`
        ps -p "$THEPID" >&/dev/null && {
            true
        } || {
            /bin/rm -f "$PIDFILE"
            false
        }
    else
        false
    fi
}

can_restart() {
    PNAME=$1
    STARTFILE=`start_file "$PNAME"`
    test -f "$STARTFILE"
}

has_logs() {
    PNAME=$1
    ls "$LOGDIR/$PNAME"*.log >&/dev/null
}

### The commands

cmd_status() {
    echo -n "$PNAME"
    is_running "$PNAME" && echo -n " running" || echo -n " not running"
    can_restart "$PNAME" && echo -n ", can restart"
    has_logs "$PNAME" && echo -n ", has logs"
    echo "."
}

cmd_start() {
    if is_running "$PNAME"; then
        echo "Error: Cannot start second instance of $PNAME."
        false
    else
        STARTFILE=`start_file "$PNAME"`
        LOGFILE=`log_file "$PNAME"`
        pwd > "$STARTFILE"
        echo "$*" >> "$STARTFILE"
        nohup $* >&"$LOGFILE" &
        echo $! >"$PIDFILE"
    fi
}

cmd_stop() {
    if is_running "$PNAME"; then
        PIDFILE=`pid_file "$PNAME"`
        THEPID=`cat "$PIDFILE"`
        kill $THEPID >&/dev/null && {
            while is_running "$PNAME"; do sleep 1; done
        } || {
            echo "Error: Could not stop $PNAME ($THEPID)."
            false
        }
    fi
}

cmd_restart() {
    if is_running "$PNAME"; then
        echo "Error: Cannot restart $PNAME, it is still running."
        false
    else
        STARTFILE=`start_file "$PNAME"`
        LOGFILE=`log_file "$PNAME"`
        if [ -f "$STARTFILE" ]; then
            PPATH=`cat "$STARTFILE" | nth_line 1`
            PCMD=`cat "$STARTFILE" | nth_line 2`
            (cd "$PPATH" ; nohup $PCMD >&"$LOGFILE" & echo $! >"$PIDFILE")
        else
            echo "Error: Cannot restart $PNAME, no restart file found."
            false
        fi
    fi
}

cmd_log() {
    LINES="-10"
    if [ ! -z "$1" ]; then
        LINES="$1"
    fi
    LOGFILE=`ls -1t "$LOGDIR/$PNAME"~*.log | head -1`
    if [ -f "$LOGFILE" ]; then
        is_running "$PNAME" && {
            echo "*** Showing process output, close with Ctrl-C"
            tail "${LINES}f" "$LOGFILE"
        } || {
            tail "$LINES" "$LOGFILE"
            echo "*** Process terminated"
        }
    else
        echo "Error: $PNAME has no logs."
    fi
}

cmd_logs() {
    ls -1td "$LOGDIR/$PNAME"~*.log 2>/dev/null || {
        echo "Error: No logs for $PNAME"
    }
}

cmd_clean() {
    if is_running "$PNAME"; then
        echo "Error: Cannot clean running $PNAME"
        false
    else
        if [ "x$1" = "x-f" ]; then
            /bin/rm -f "$RUNDIR/$PNAME".*
        fi
        /bin/rm -f "$LOGDIR/$PNAME~"*.log
    fi
}

### Execute the command

CMDTYPE=`type -t "cmd_$CMD"`
if [ "x$CMDTYPE" != "xfunction" ]; then
    echo "Error: Unknown command $CMD."
    usage
    exit 1
fi

if [ "x$PNAME" = "xall" ]; then
    if [ "x$CMD" = "xstart" ]; then
        echo "Error: Cannot start 'all'"
        usage
        exit 1
    fi
    if [ "x$CMD" = "xlog" ]; then
        echo "Error: Cannot show log for 'all'"
        usage
        exit 1
    fi
    for PNAME in `all_names`; do
        "cmd_$CMD" $*
    done
else
    "cmd_$CMD" $*
fi
