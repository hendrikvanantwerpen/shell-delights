#!/bin/bash

RUNDIR=$HOME/.local/run
LOGDIR=$HOME/.local/log
mkdir -p "$RUNDIR" "$LOGDIR"

usage() {
    echo "Usage:"
    echo -e "\t$0 NAMES start PROGRAM <ARGS>"
    echo -e "\t$0 NAME log               - Show most recent program output"
    echo -e "\t$0 all|NAMES status       - Show process status (is it running, can it restart, does it have logs)"
    echo -e "\t$0 all|NAMES stop         - Stop process"
    echo -e "\t$0 all|NAMES restart [-c] - Restart process (in CWD with -c)"
    echo -e "\t$0 all|NAMES clean [-f]   - Clean logs (and restart info with -f)"
    echo -e "\t$0 all|NAMES logs         - Show all available log files"
}

PNAMES=$1
shift 1
if [ -z "$PNAMES" ]; then
    echo "*** Defaulting to all"
    PNAMES=all
fi
if [ "$PNAMES" = "help" -o "$PNAMES" = "--help" ]; then
    usage
    exit 0
fi
if echo "$PNAMES" | grep '~' >&/dev/null; then
    echo "Error: Names cannot contain tilde (~)"
    exit 1
fi

CMD=$1
shift 1
if [ -z "$CMD" ]; then
    echo "*** Defaulting to status"
    CMD=status
fi

### Aux functions

nth_line() {
    N=$1
    head -$N | tail -1
}

pid_file() {
    echo "$RUNDIR/$1.pid"
}
start_file() {
    echo "$RUNDIR/$1.cmd"
}
log_file() {
    echo "$LOGDIR/$1~$(date +%Y-%m-%dT%H.%M.%S).log"
}

ext_names() {
    THEDIR=$1
    THEEXT=$2
    ls -1d $THEDIR/*$THEEXT 2>/dev/null | xargs -I{} basename {} $THEEXT
}

all_names() {
    (ext_names "$RUNDIR" .pid ; \
     ext_names "$RUNDIR" .cmd ; \
     ext_names "$LOGDIR" .log | cut -d~ -f1) | sort | uniq
}

is_running() {
    PIDFILE=`pid_file "$1"`
    if [ -f "$PIDFILE" ]; then
        THEPID=`cat "$PIDFILE"`
        ps -p "$THEPID" >&/dev/null && {
            true
        } || {
            /bin/rm -f "$PIDFILE"
            false
        }
    else
        false
    fi
}

can_restart() {
    STARTFILE=`start_file "$1"`
    test -f "$STARTFILE"
}

has_logs() {
    ls "$LOGDIR/$1"*.log >&/dev/null
}

### The commands

cmd_status() {
    echo -n "$1"
    is_running "$1" && {
        PIDFILE=`pid_file "$1"`
        THEPID=`cat "$PIDFILE"`
        echo -n " running ($THEPID)"
    } || echo -n " not running"
    can_restart "$1" && echo -n ", can restart"
    has_logs "$1" && echo -n ", has log(s)"
    echo "."
}

cmd_start() {
    P=$1
    shift 1
    if is_running "$P"; then
        echo "Error: Cannot start second instance of $P"
        false
    elif [ -z "$*" ]; then
        echo "Error: No start command provided for $P"
        false
    else
        STARTFILE=`start_file "$P"`
        LOGFILE=`log_file "$P"`
        pwd > "$STARTFILE"
        echo "$@" >> "$STARTFILE"
        nohup "$@" >&"$LOGFILE" &
        echo $! >"$PIDFILE"
    fi
}

cmd_stop() {
    if is_running "$1"; then
        PIDFILE=`pid_file "$1"`
        THEPID=`cat "$PIDFILE"`
        kill $THEPID >&/dev/null && {
            while is_running "$1"; do sleep 1; done
        } || {
            echo "Error: Could not stop $1 ($THEPID)."
            false
        }
    fi
}

cmd_restart() {
    if is_running "$1"; then
        echo "Error: Cannot restart $1, it is still running."
        false
    else
        STARTFILE=`start_file "$1"`
        LOGFILE=`log_file "$1"`
        if [ -f "$STARTFILE" ]; then
            PPATH=`cat "$STARTFILE" | nth_line 1`
            PCMD=`cat "$STARTFILE" | nth_line 2`
            if [ "x$2" = "x-c" ]; then
                PPATH=`pwd`
            fi
            (cd "$PPATH" ; nohup $PCMD >&"$LOGFILE" & echo $! >"$PIDFILE")
        else
            echo "Error: Cannot restart $1, no restart file found."
            false
        fi
    fi
}

cmd_log() {
    LINES="-10"
    if [ ! -z "$2" ]; then
        LINES="$2"
    fi
    LOGFILE=`ls -1t "$LOGDIR/$1"~*.log | head -1`
    if [ -f "$LOGFILE" ]; then
        is_running "$1" && {
            echo "*** Showing process output, close with Ctrl-C"
            tail "${LINES}f" "$LOGFILE"
        } || {
            tail "$LINES" "$LOGFILE"
            echo "*** Process terminated"
        }
    else
        echo "Error: $1 has no logs."
    fi
}

cmd_logs() {
    ls -1td "$LOGDIR/$1"~*.log 2>/dev/null || {
        echo "Error: No logs for $1"
    }
}

cmd_clean() {
    if is_running "$1"; then
        echo "Error: Cannot clean running $1"
        false
    else
        if [ "x$2" = "x-f" ]; then
            /bin/rm -f "$RUNDIR/$1".*
        fi
        /bin/rm -f "$LOGDIR/$1~"*.log
    fi
}

is_cmd() {
    [ x`type -t "cmd_$1"` = "xfunction" ]
} 

### Execute the command

# Expand all
if [ "x$PNAMES" = "xall" ]; then
    PNAMES=`all_names`
fi

# Check for illegal names
for PNAME in $PNAMES; do
    if [ "x$PNAME" = "xall" ]; then
        echo "Error: Name 'all' should not be used in a list of names."
        usage
        exit 1
    fi
    if is_cmd "$PNAME"; then
        echo "Error: Using command '$PNAME' as a name, did you forget to specify name(s)?"
        usage
        exit 1
    fi
done

# Check for valid command
if ! is_cmd "$CMD"; then
    echo "Error: Unknown command $CMD."
    usage
    exit 1
fi

# Check singleton commands
if [ `echo $PNAMES | wc -w` -gt 1 -a "x$CMD" = "xlog" ]; then
    echo "Error: Cannot show log for multiple process"
    usage
    exit 1
fi

# Execute actual command
for PNAME in $PNAMES; do
    "cmd_$CMD" "$PNAME" "$@"
done
